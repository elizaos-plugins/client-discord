{"version":3,"sources":["../../../node_modules/@smithy/shared-ini-file-loader/dist-es/getProfileName.js","../../../node_modules/@smithy/shared-ini-file-loader/dist-es/getConfigFilepath.js","../../../node_modules/@smithy/shared-ini-file-loader/dist-es/getHomeDir.js","../../../node_modules/@smithy/shared-ini-file-loader/dist-es/loadSharedConfigFiles.js","../../../node_modules/@smithy/shared-ini-file-loader/dist-es/getConfigData.js","../../../node_modules/@smithy/shared-ini-file-loader/dist-es/getCredentialsFilepath.js","../../../node_modules/@smithy/shared-ini-file-loader/dist-es/parseIni.js","../../../node_modules/@smithy/shared-ini-file-loader/dist-es/slurpFile.js","../../../node_modules/@smithy/shared-ini-file-loader/dist-es/getSsoSessionData.js","../../../node_modules/@smithy/shared-ini-file-loader/dist-es/loadSsoSessionData.js","../../../node_modules/@smithy/shared-ini-file-loader/dist-es/mergeConfigFiles.js","../../../node_modules/@smithy/shared-ini-file-loader/dist-es/parseKnownFiles.js","../../../node_modules/@smithy/shared-ini-file-loader/dist-es/getSSOTokenFilepath.js","../../../node_modules/@smithy/shared-ini-file-loader/dist-es/getSSOTokenFromFile.js"],"sourcesContent":["export const ENV_PROFILE = \"AWS_PROFILE\";\nexport const DEFAULT_PROFILE = \"default\";\nexport const getProfileName = (init) => init.profile || process.env[ENV_PROFILE] || DEFAULT_PROFILE;\n","import { join } from \"path\";\nimport { getHomeDir } from \"./getHomeDir\";\nexport const ENV_CONFIG_PATH = \"AWS_CONFIG_FILE\";\nexport const getConfigFilepath = () => process.env[ENV_CONFIG_PATH] || join(getHomeDir(), \".aws\", \"config\");\n","import { homedir } from \"os\";\nimport { sep } from \"path\";\nconst homeDirCache = {};\nconst getHomeDirCacheKey = () => {\n    if (process && process.geteuid) {\n        return `${process.geteuid()}`;\n    }\n    return \"DEFAULT\";\n};\nexport const getHomeDir = () => {\n    const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${sep}` } = process.env;\n    if (HOME)\n        return HOME;\n    if (USERPROFILE)\n        return USERPROFILE;\n    if (HOMEPATH)\n        return `${HOMEDRIVE}${HOMEPATH}`;\n    const homeDirCacheKey = getHomeDirCacheKey();\n    if (!homeDirCache[homeDirCacheKey])\n        homeDirCache[homeDirCacheKey] = homedir();\n    return homeDirCache[homeDirCacheKey];\n};\n","import { join } from \"path\";\nimport { getConfigData } from \"./getConfigData\";\nimport { getConfigFilepath } from \"./getConfigFilepath\";\nimport { getCredentialsFilepath } from \"./getCredentialsFilepath\";\nimport { getHomeDir } from \"./getHomeDir\";\nimport { parseIni } from \"./parseIni\";\nimport { slurpFile } from \"./slurpFile\";\nconst swallowError = () => ({});\nexport const CONFIG_PREFIX_SEPARATOR = \".\";\nexport const loadSharedConfigFiles = async (init = {}) => {\n    const { filepath = getCredentialsFilepath(), configFilepath = getConfigFilepath() } = init;\n    const homeDir = getHomeDir();\n    const relativeHomeDirPrefix = \"~/\";\n    let resolvedFilepath = filepath;\n    if (filepath.startsWith(relativeHomeDirPrefix)) {\n        resolvedFilepath = join(homeDir, filepath.slice(2));\n    }\n    let resolvedConfigFilepath = configFilepath;\n    if (configFilepath.startsWith(relativeHomeDirPrefix)) {\n        resolvedConfigFilepath = join(homeDir, configFilepath.slice(2));\n    }\n    const parsedFiles = await Promise.all([\n        slurpFile(resolvedConfigFilepath, {\n            ignoreCache: init.ignoreCache,\n        })\n            .then(parseIni)\n            .then(getConfigData)\n            .catch(swallowError),\n        slurpFile(resolvedFilepath, {\n            ignoreCache: init.ignoreCache,\n        })\n            .then(parseIni)\n            .catch(swallowError),\n    ]);\n    return {\n        configFile: parsedFiles[0],\n        credentialsFile: parsedFiles[1],\n    };\n};\n","import { IniSectionType } from \"@smithy/types\";\nimport { CONFIG_PREFIX_SEPARATOR } from \"./loadSharedConfigFiles\";\nexport const getConfigData = (data) => Object.entries(data)\n    .filter(([key]) => {\n    const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);\n    if (indexOfSeparator === -1) {\n        return false;\n    }\n    return Object.values(IniSectionType).includes(key.substring(0, indexOfSeparator));\n})\n    .reduce((acc, [key, value]) => {\n    const indexOfSeparator = key.indexOf(CONFIG_PREFIX_SEPARATOR);\n    const updatedKey = key.substring(0, indexOfSeparator) === IniSectionType.PROFILE ? key.substring(indexOfSeparator + 1) : key;\n    acc[updatedKey] = value;\n    return acc;\n}, {\n    ...(data.default && { default: data.default }),\n});\n","import { join } from \"path\";\nimport { getHomeDir } from \"./getHomeDir\";\nexport const ENV_CREDENTIALS_PATH = \"AWS_SHARED_CREDENTIALS_FILE\";\nexport const getCredentialsFilepath = () => process.env[ENV_CREDENTIALS_PATH] || join(getHomeDir(), \".aws\", \"credentials\");\n","import { IniSectionType } from \"@smithy/types\";\nimport { CONFIG_PREFIX_SEPARATOR } from \"./loadSharedConfigFiles\";\nconst prefixKeyRegex = /^([\\w-]+)\\s([\"'])?([\\w-@\\+\\.%:/]+)\\2$/;\nconst profileNameBlockList = [\"__proto__\", \"profile __proto__\"];\nexport const parseIni = (iniData) => {\n    const map = {};\n    let currentSection;\n    let currentSubSection;\n    for (const iniLine of iniData.split(/\\r?\\n/)) {\n        const trimmedLine = iniLine.split(/(^|\\s)[;#]/)[0].trim();\n        const isSection = trimmedLine[0] === \"[\" && trimmedLine[trimmedLine.length - 1] === \"]\";\n        if (isSection) {\n            currentSection = undefined;\n            currentSubSection = undefined;\n            const sectionName = trimmedLine.substring(1, trimmedLine.length - 1);\n            const matches = prefixKeyRegex.exec(sectionName);\n            if (matches) {\n                const [, prefix, , name] = matches;\n                if (Object.values(IniSectionType).includes(prefix)) {\n                    currentSection = [prefix, name].join(CONFIG_PREFIX_SEPARATOR);\n                }\n            }\n            else {\n                currentSection = sectionName;\n            }\n            if (profileNameBlockList.includes(sectionName)) {\n                throw new Error(`Found invalid profile name \"${sectionName}\"`);\n            }\n        }\n        else if (currentSection) {\n            const indexOfEqualsSign = trimmedLine.indexOf(\"=\");\n            if (![0, -1].includes(indexOfEqualsSign)) {\n                const [name, value] = [\n                    trimmedLine.substring(0, indexOfEqualsSign).trim(),\n                    trimmedLine.substring(indexOfEqualsSign + 1).trim(),\n                ];\n                if (value === \"\") {\n                    currentSubSection = name;\n                }\n                else {\n                    if (currentSubSection && iniLine.trimStart() === iniLine) {\n                        currentSubSection = undefined;\n                    }\n                    map[currentSection] = map[currentSection] || {};\n                    const key = currentSubSection ? [currentSubSection, name].join(CONFIG_PREFIX_SEPARATOR) : name;\n                    map[currentSection][key] = value;\n                }\n            }\n        }\n    }\n    return map;\n};\n","import { promises as fsPromises } from \"fs\";\nconst { readFile } = fsPromises;\nconst filePromisesHash = {};\nexport const slurpFile = (path, options) => {\n    if (!filePromisesHash[path] || options?.ignoreCache) {\n        filePromisesHash[path] = readFile(path, \"utf8\");\n    }\n    return filePromisesHash[path];\n};\n","import { IniSectionType } from \"@smithy/types\";\nimport { CONFIG_PREFIX_SEPARATOR } from \"./loadSharedConfigFiles\";\nexport const getSsoSessionData = (data) => Object.entries(data)\n    .filter(([key]) => key.startsWith(IniSectionType.SSO_SESSION + CONFIG_PREFIX_SEPARATOR))\n    .reduce((acc, [key, value]) => ({ ...acc, [key.substring(key.indexOf(CONFIG_PREFIX_SEPARATOR) + 1)]: value }), {});\n","import { getConfigFilepath } from \"./getConfigFilepath\";\nimport { getSsoSessionData } from \"./getSsoSessionData\";\nimport { parseIni } from \"./parseIni\";\nimport { slurpFile } from \"./slurpFile\";\nconst swallowError = () => ({});\nexport const loadSsoSessionData = async (init = {}) => slurpFile(init.configFilepath ?? getConfigFilepath())\n    .then(parseIni)\n    .then(getSsoSessionData)\n    .catch(swallowError);\n","export const mergeConfigFiles = (...files) => {\n    const merged = {};\n    for (const file of files) {\n        for (const [key, values] of Object.entries(file)) {\n            if (merged[key] !== undefined) {\n                Object.assign(merged[key], values);\n            }\n            else {\n                merged[key] = values;\n            }\n        }\n    }\n    return merged;\n};\n","import { loadSharedConfigFiles } from \"./loadSharedConfigFiles\";\nimport { mergeConfigFiles } from \"./mergeConfigFiles\";\nexport const parseKnownFiles = async (init) => {\n    const parsedFiles = await loadSharedConfigFiles(init);\n    return mergeConfigFiles(parsedFiles.configFile, parsedFiles.credentialsFile);\n};\n","import { createHash } from \"crypto\";\nimport { join } from \"path\";\nimport { getHomeDir } from \"./getHomeDir\";\nexport const getSSOTokenFilepath = (id) => {\n    const hasher = createHash(\"sha1\");\n    const cacheName = hasher.update(id).digest(\"hex\");\n    return join(getHomeDir(), \".aws\", \"sso\", \"cache\", `${cacheName}.json`);\n};\n","import { promises as fsPromises } from \"fs\";\nimport { getSSOTokenFilepath } from \"./getSSOTokenFilepath\";\nconst { readFile } = fsPromises;\nexport const getSSOTokenFromFile = async (id) => {\n    const ssoTokenFilepath = getSSOTokenFilepath(id);\n    const ssoTokenText = await readFile(ssoTokenFilepath, \"utf8\");\n    return JSON.parse(ssoTokenText);\n};\n"],"mappings":"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","names":["join","join","join","join","swallowError","join","join","fsPromises","readFile","fsPromises"]}
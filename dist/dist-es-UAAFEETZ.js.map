{"version":3,"sources":["../../../node_modules/@smithy/credential-provider-imds/dist-es/fromContainerMetadata.js","../../../node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/httpRequest.js","../../../node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/ImdsCredentials.js","../../../node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/RemoteProviderInit.js","../../../node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/retry.js","../../../node_modules/@smithy/credential-provider-imds/dist-es/error/InstanceMetadataV1FallbackError.js","../../../node_modules/@smithy/credential-provider-imds/dist-es/config/Endpoint.js","../../../node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointConfigOptions.js","../../../node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointMode.js","../../../node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointModeConfigOptions.js","../../../node_modules/@smithy/credential-provider-imds/dist-es/utils/getInstanceMetadataEndpoint.js","../../../node_modules/@smithy/credential-provider-imds/dist-es/utils/getExtendedInstanceMetadataCredentials.js","../../../node_modules/@smithy/credential-provider-imds/dist-es/utils/staticStabilityProvider.js","../../../node_modules/@smithy/credential-provider-imds/dist-es/fromInstanceMetadata.js"],"sourcesContent":["import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { parse } from \"url\";\nimport { httpRequest } from \"./remoteProvider/httpRequest\";\nimport { fromImdsCredentials, isImdsCredentials } from \"./remoteProvider/ImdsCredentials\";\nimport { providerConfigFromInit } from \"./remoteProvider/RemoteProviderInit\";\nimport { retry } from \"./remoteProvider/retry\";\nexport const ENV_CMDS_FULL_URI = \"AWS_CONTAINER_CREDENTIALS_FULL_URI\";\nexport const ENV_CMDS_RELATIVE_URI = \"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\";\nexport const ENV_CMDS_AUTH_TOKEN = \"AWS_CONTAINER_AUTHORIZATION_TOKEN\";\nexport const fromContainerMetadata = (init = {}) => {\n    const { timeout, maxRetries } = providerConfigFromInit(init);\n    return () => retry(async () => {\n        const requestOptions = await getCmdsUri({ logger: init.logger });\n        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));\n        if (!isImdsCredentials(credsResponse)) {\n            throw new CredentialsProviderError(\"Invalid response received from instance metadata service.\", {\n                logger: init.logger,\n            });\n        }\n        return fromImdsCredentials(credsResponse);\n    }, maxRetries);\n};\nconst requestFromEcsImds = async (timeout, options) => {\n    if (process.env[ENV_CMDS_AUTH_TOKEN]) {\n        options.headers = {\n            ...options.headers,\n            Authorization: process.env[ENV_CMDS_AUTH_TOKEN],\n        };\n    }\n    const buffer = await httpRequest({\n        ...options,\n        timeout,\n    });\n    return buffer.toString();\n};\nconst CMDS_IP = \"169.254.170.2\";\nconst GREENGRASS_HOSTS = {\n    localhost: true,\n    \"127.0.0.1\": true,\n};\nconst GREENGRASS_PROTOCOLS = {\n    \"http:\": true,\n    \"https:\": true,\n};\nconst getCmdsUri = async ({ logger }) => {\n    if (process.env[ENV_CMDS_RELATIVE_URI]) {\n        return {\n            hostname: CMDS_IP,\n            path: process.env[ENV_CMDS_RELATIVE_URI],\n        };\n    }\n    if (process.env[ENV_CMDS_FULL_URI]) {\n        const parsed = parse(process.env[ENV_CMDS_FULL_URI]);\n        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {\n            throw new CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, {\n                tryNextLink: false,\n                logger,\n            });\n        }\n        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {\n            throw new CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, {\n                tryNextLink: false,\n                logger,\n            });\n        }\n        return {\n            ...parsed,\n            port: parsed.port ? parseInt(parsed.port, 10) : undefined,\n        };\n    }\n    throw new CredentialsProviderError(\"The container metadata credential provider cannot be used unless\" +\n        ` the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment` +\n        \" variable is set\", {\n        tryNextLink: false,\n        logger,\n    });\n};\n","import { ProviderError } from \"@smithy/property-provider\";\nimport { Buffer } from \"buffer\";\nimport { request } from \"http\";\nexport function httpRequest(options) {\n    return new Promise((resolve, reject) => {\n        const req = request({\n            method: \"GET\",\n            ...options,\n            hostname: options.hostname?.replace(/^\\[(.+)\\]$/, \"$1\"),\n        });\n        req.on(\"error\", (err) => {\n            reject(Object.assign(new ProviderError(\"Unable to connect to instance metadata service\"), err));\n            req.destroy();\n        });\n        req.on(\"timeout\", () => {\n            reject(new ProviderError(\"TimeoutError from instance metadata service\"));\n            req.destroy();\n        });\n        req.on(\"response\", (res) => {\n            const { statusCode = 400 } = res;\n            if (statusCode < 200 || 300 <= statusCode) {\n                reject(Object.assign(new ProviderError(\"Error response received from instance metadata service\"), { statusCode }));\n                req.destroy();\n            }\n            const chunks = [];\n            res.on(\"data\", (chunk) => {\n                chunks.push(chunk);\n            });\n            res.on(\"end\", () => {\n                resolve(Buffer.concat(chunks));\n                req.destroy();\n            });\n        });\n        req.end();\n    });\n}\n","export const isImdsCredentials = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.AccessKeyId === \"string\" &&\n    typeof arg.SecretAccessKey === \"string\" &&\n    typeof arg.Token === \"string\" &&\n    typeof arg.Expiration === \"string\";\nexport const fromImdsCredentials = (creds) => ({\n    accessKeyId: creds.AccessKeyId,\n    secretAccessKey: creds.SecretAccessKey,\n    sessionToken: creds.Token,\n    expiration: new Date(creds.Expiration),\n    ...(creds.AccountId && { accountId: creds.AccountId }),\n});\n","export const DEFAULT_TIMEOUT = 1000;\nexport const DEFAULT_MAX_RETRIES = 0;\nexport const providerConfigFromInit = ({ maxRetries = DEFAULT_MAX_RETRIES, timeout = DEFAULT_TIMEOUT, }) => ({ maxRetries, timeout });\n","export const retry = (toRetry, maxRetries) => {\n    let promise = toRetry();\n    for (let i = 0; i < maxRetries; i++) {\n        promise = promise.catch(toRetry);\n    }\n    return promise;\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nexport class InstanceMetadataV1FallbackError extends CredentialsProviderError {\n    constructor(message, tryNextLink = true) {\n        super(message, tryNextLink);\n        this.tryNextLink = tryNextLink;\n        this.name = \"InstanceMetadataV1FallbackError\";\n        Object.setPrototypeOf(this, InstanceMetadataV1FallbackError.prototype);\n    }\n}\n","export var Endpoint;\n(function (Endpoint) {\n    Endpoint[\"IPv4\"] = \"http://169.254.169.254\";\n    Endpoint[\"IPv6\"] = \"http://[fd00:ec2::254]\";\n})(Endpoint || (Endpoint = {}));\n","export const ENV_ENDPOINT_NAME = \"AWS_EC2_METADATA_SERVICE_ENDPOINT\";\nexport const CONFIG_ENDPOINT_NAME = \"ec2_metadata_service_endpoint\";\nexport const ENDPOINT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_ENDPOINT_NAME],\n    configFileSelector: (profile) => profile[CONFIG_ENDPOINT_NAME],\n    default: undefined,\n};\n","export var EndpointMode;\n(function (EndpointMode) {\n    EndpointMode[\"IPv4\"] = \"IPv4\";\n    EndpointMode[\"IPv6\"] = \"IPv6\";\n})(EndpointMode || (EndpointMode = {}));\n","import { EndpointMode } from \"./EndpointMode\";\nexport const ENV_ENDPOINT_MODE_NAME = \"AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE\";\nexport const CONFIG_ENDPOINT_MODE_NAME = \"ec2_metadata_service_endpoint_mode\";\nexport const ENDPOINT_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_ENDPOINT_MODE_NAME],\n    configFileSelector: (profile) => profile[CONFIG_ENDPOINT_MODE_NAME],\n    default: EndpointMode.IPv4,\n};\n","import { loadConfig } from \"@smithy/node-config-provider\";\nimport { parseUrl } from \"@smithy/url-parser\";\nimport { Endpoint as InstanceMetadataEndpoint } from \"../config/Endpoint\";\nimport { ENDPOINT_CONFIG_OPTIONS } from \"../config/EndpointConfigOptions\";\nimport { EndpointMode } from \"../config/EndpointMode\";\nimport { ENDPOINT_MODE_CONFIG_OPTIONS, } from \"../config/EndpointModeConfigOptions\";\nexport const getInstanceMetadataEndpoint = async () => parseUrl((await getFromEndpointConfig()) || (await getFromEndpointModeConfig()));\nconst getFromEndpointConfig = async () => loadConfig(ENDPOINT_CONFIG_OPTIONS)();\nconst getFromEndpointModeConfig = async () => {\n    const endpointMode = await loadConfig(ENDPOINT_MODE_CONFIG_OPTIONS)();\n    switch (endpointMode) {\n        case EndpointMode.IPv4:\n            return InstanceMetadataEndpoint.IPv4;\n        case EndpointMode.IPv6:\n            return InstanceMetadataEndpoint.IPv6;\n        default:\n            throw new Error(`Unsupported endpoint mode: ${endpointMode}.` + ` Select from ${Object.values(EndpointMode)}`);\n    }\n};\n","const STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;\nconst STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;\nconst STATIC_STABILITY_DOC_URL = \"https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html\";\nexport const getExtendedInstanceMetadataCredentials = (credentials, logger) => {\n    const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS +\n        Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);\n    const newExpiration = new Date(Date.now() + refreshInterval * 1000);\n    logger.warn(\"Attempting credential expiration extension due to a credential service availability issue. A refresh of these \" +\n        `credentials will be attempted after ${new Date(newExpiration)}.\\nFor more information, please visit: ` +\n        STATIC_STABILITY_DOC_URL);\n    const originalExpiration = credentials.originalExpiration ?? credentials.expiration;\n    return {\n        ...credentials,\n        ...(originalExpiration ? { originalExpiration } : {}),\n        expiration: newExpiration,\n    };\n};\n","import { getExtendedInstanceMetadataCredentials } from \"./getExtendedInstanceMetadataCredentials\";\nexport const staticStabilityProvider = (provider, options = {}) => {\n    const logger = options?.logger || console;\n    let pastCredentials;\n    return async () => {\n        let credentials;\n        try {\n            credentials = await provider();\n            if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {\n                credentials = getExtendedInstanceMetadataCredentials(credentials, logger);\n            }\n        }\n        catch (e) {\n            if (pastCredentials) {\n                logger.warn(\"Credential renew failed: \", e);\n                credentials = getExtendedInstanceMetadataCredentials(pastCredentials, logger);\n            }\n            else {\n                throw e;\n            }\n        }\n        pastCredentials = credentials;\n        return credentials;\n    };\n};\n","import { loadConfig } from \"@smithy/node-config-provider\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { InstanceMetadataV1FallbackError } from \"./error/InstanceMetadataV1FallbackError\";\nimport { httpRequest } from \"./remoteProvider/httpRequest\";\nimport { fromImdsCredentials, isImdsCredentials } from \"./remoteProvider/ImdsCredentials\";\nimport { providerConfigFromInit } from \"./remoteProvider/RemoteProviderInit\";\nimport { retry } from \"./remoteProvider/retry\";\nimport { getInstanceMetadataEndpoint } from \"./utils/getInstanceMetadataEndpoint\";\nimport { staticStabilityProvider } from \"./utils/staticStabilityProvider\";\nconst IMDS_PATH = \"/latest/meta-data/iam/security-credentials/\";\nconst IMDS_TOKEN_PATH = \"/latest/api/token\";\nconst AWS_EC2_METADATA_V1_DISABLED = \"AWS_EC2_METADATA_V1_DISABLED\";\nconst PROFILE_AWS_EC2_METADATA_V1_DISABLED = \"ec2_metadata_v1_disabled\";\nconst X_AWS_EC2_METADATA_TOKEN = \"x-aws-ec2-metadata-token\";\nexport const fromInstanceMetadata = (init = {}) => staticStabilityProvider(getInstanceMetadataProvider(init), { logger: init.logger });\nconst getInstanceMetadataProvider = (init = {}) => {\n    let disableFetchToken = false;\n    const { logger, profile } = init;\n    const { timeout, maxRetries } = providerConfigFromInit(init);\n    const getCredentials = async (maxRetries, options) => {\n        const isImdsV1Fallback = disableFetchToken || options.headers?.[X_AWS_EC2_METADATA_TOKEN] == null;\n        if (isImdsV1Fallback) {\n            let fallbackBlockedFromProfile = false;\n            let fallbackBlockedFromProcessEnv = false;\n            const configValue = await loadConfig({\n                environmentVariableSelector: (env) => {\n                    const envValue = env[AWS_EC2_METADATA_V1_DISABLED];\n                    fallbackBlockedFromProcessEnv = !!envValue && envValue !== \"false\";\n                    if (envValue === undefined) {\n                        throw new CredentialsProviderError(`${AWS_EC2_METADATA_V1_DISABLED} not set in env, checking config file next.`, { logger: init.logger });\n                    }\n                    return fallbackBlockedFromProcessEnv;\n                },\n                configFileSelector: (profile) => {\n                    const profileValue = profile[PROFILE_AWS_EC2_METADATA_V1_DISABLED];\n                    fallbackBlockedFromProfile = !!profileValue && profileValue !== \"false\";\n                    return fallbackBlockedFromProfile;\n                },\n                default: false,\n            }, {\n                profile,\n            })();\n            if (init.ec2MetadataV1Disabled || configValue) {\n                const causes = [];\n                if (init.ec2MetadataV1Disabled)\n                    causes.push(\"credential provider initialization (runtime option ec2MetadataV1Disabled)\");\n                if (fallbackBlockedFromProfile)\n                    causes.push(`config file profile (${PROFILE_AWS_EC2_METADATA_V1_DISABLED})`);\n                if (fallbackBlockedFromProcessEnv)\n                    causes.push(`process environment variable (${AWS_EC2_METADATA_V1_DISABLED})`);\n                throw new InstanceMetadataV1FallbackError(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${causes.join(\", \")}].`);\n            }\n        }\n        const imdsProfile = (await retry(async () => {\n            let profile;\n            try {\n                profile = await getProfile(options);\n            }\n            catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return profile;\n        }, maxRetries)).trim();\n        return retry(async () => {\n            let creds;\n            try {\n                creds = await getCredentialsFromProfile(imdsProfile, options, init);\n            }\n            catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return creds;\n        }, maxRetries);\n    };\n    return async () => {\n        const endpoint = await getInstanceMetadataEndpoint();\n        if (disableFetchToken) {\n            logger?.debug(\"AWS SDK Instance Metadata\", \"using v1 fallback (no token fetch)\");\n            return getCredentials(maxRetries, { ...endpoint, timeout });\n        }\n        else {\n            let token;\n            try {\n                token = (await getMetadataToken({ ...endpoint, timeout })).toString();\n            }\n            catch (error) {\n                if (error?.statusCode === 400) {\n                    throw Object.assign(error, {\n                        message: \"EC2 Metadata token request returned error\",\n                    });\n                }\n                else if (error.message === \"TimeoutError\" || [403, 404, 405].includes(error.statusCode)) {\n                    disableFetchToken = true;\n                }\n                logger?.debug(\"AWS SDK Instance Metadata\", \"using v1 fallback (initial)\");\n                return getCredentials(maxRetries, { ...endpoint, timeout });\n            }\n            return getCredentials(maxRetries, {\n                ...endpoint,\n                headers: {\n                    [X_AWS_EC2_METADATA_TOKEN]: token,\n                },\n                timeout,\n            });\n        }\n    };\n};\nconst getMetadataToken = async (options) => httpRequest({\n    ...options,\n    path: IMDS_TOKEN_PATH,\n    method: \"PUT\",\n    headers: {\n        \"x-aws-ec2-metadata-token-ttl-seconds\": \"21600\",\n    },\n});\nconst getProfile = async (options) => (await httpRequest({ ...options, path: IMDS_PATH })).toString();\nconst getCredentialsFromProfile = async (profile, options, init) => {\n    const credentialsResponse = JSON.parse((await httpRequest({\n        ...options,\n        path: IMDS_PATH + profile,\n    })).toString());\n    if (!isImdsCredentials(credentialsResponse)) {\n        throw new CredentialsProviderError(\"Invalid response received from instance metadata service.\", {\n            logger: init.logger,\n        });\n    }\n    return fromImdsCredentials(credentialsResponse);\n};\n"],"mappings":"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","names":["Endpoint","EndpointMode","maxRetries","profile"]}
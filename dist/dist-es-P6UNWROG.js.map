{"version":3,"sources":["../../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromTokenFile.js","../../../node_modules/@aws-sdk/client-bedrock-runtime/node_modules/@aws-sdk/credential-provider-node/node_modules/@aws-sdk/credential-provider-web-identity/dist-es/fromWebToken.js"],"sourcesContent":["import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { readFileSync } from \"fs\";\nimport { fromWebToken } from \"./fromWebToken\";\nconst ENV_TOKEN_FILE = \"AWS_WEB_IDENTITY_TOKEN_FILE\";\nconst ENV_ROLE_ARN = \"AWS_ROLE_ARN\";\nconst ENV_ROLE_SESSION_NAME = \"AWS_ROLE_SESSION_NAME\";\nexport const fromTokenFile = (init = {}) => async () => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-web-identity - fromTokenFile\");\n    const webIdentityTokenFile = init?.webIdentityTokenFile ?? process.env[ENV_TOKEN_FILE];\n    const roleArn = init?.roleArn ?? process.env[ENV_ROLE_ARN];\n    const roleSessionName = init?.roleSessionName ?? process.env[ENV_ROLE_SESSION_NAME];\n    if (!webIdentityTokenFile || !roleArn) {\n        throw new CredentialsProviderError(\"Web identity configuration not specified\", {\n            logger: init.logger,\n        });\n    }\n    const credentials = await fromWebToken({\n        ...init,\n        webIdentityToken: readFileSync(webIdentityTokenFile, { encoding: \"ascii\" }),\n        roleArn,\n        roleSessionName,\n    })();\n    if (webIdentityTokenFile === process.env[ENV_TOKEN_FILE]) {\n        setCredentialFeature(credentials, \"CREDENTIALS_ENV_VARS_STS_WEB_ID_TOKEN\", \"h\");\n    }\n    return credentials;\n};\n","export const fromWebToken = (init) => async (awsIdentityProperties) => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-web-identity - fromWebToken\");\n    const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds } = init;\n    let { roleAssumerWithWebIdentity } = init;\n    if (!roleAssumerWithWebIdentity) {\n        const { getDefaultRoleAssumerWithWebIdentity } = await import(\"@aws-sdk/nested-clients/sts\");\n        roleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity({\n            ...init.clientConfig,\n            credentialProviderLogger: init.logger,\n            parentClientConfig: {\n                ...awsIdentityProperties?.callerClientConfig,\n                ...init.parentClientConfig,\n            },\n        }, init.clientPlugins);\n    }\n    return roleAssumerWithWebIdentity({\n        RoleArn: roleArn,\n        RoleSessionName: roleSessionName ?? `aws-sdk-js-session-${Date.now()}`,\n        WebIdentityToken: webIdentityToken,\n        ProviderId: providerId,\n        PolicyArns: policyArns,\n        Policy: policy,\n        DurationSeconds: durationSeconds,\n    });\n};\n"],"mappings":";;;;;;;;;AAEA,SAAS,oBAAoB;;;ACFtB,IAAM,eAAe,CAAC,SAAS,OAAO,0BAA0B;AACnE,OAAK,QAAQ,MAAM,0DAA0D;AAC7E,QAAM,EAAE,SAAS,iBAAiB,kBAAkB,YAAY,YAAY,QAAQ,gBAAgB,IAAI;AACxG,MAAI,EAAE,2BAA2B,IAAI;AACrC,MAAI,CAAC,4BAA4B;AAC7B,UAAM,EAAE,qCAAqC,IAAI,MAAM,OAAO,mBAA6B;AAC3F,iCAA6B,qCAAqC;AAAA,MAC9D,GAAG,KAAK;AAAA,MACR,0BAA0B,KAAK;AAAA,MAC/B,oBAAoB;AAAA,QAChB,GAAG,uBAAuB;AAAA,QAC1B,GAAG,KAAK;AAAA,MACZ;AAAA,IACJ,GAAG,KAAK,aAAa;AAAA,EACzB;AACA,SAAO,2BAA2B;AAAA,IAC9B,SAAS;AAAA,IACT,iBAAiB,mBAAmB,sBAAsB,KAAK,IAAI,CAAC;AAAA,IACpE,kBAAkB;AAAA,IAClB,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,QAAQ;AAAA,IACR,iBAAiB;AAAA,EACrB,CAAC;AACL;;;ADpBA,IAAM,iBAAiB;AACvB,IAAM,eAAe;AACrB,IAAM,wBAAwB;AACvB,IAAM,gBAAgB,CAAC,OAAO,CAAC,MAAM,YAAY;AACpD,OAAK,QAAQ,MAAM,2DAA2D;AAC9E,QAAM,uBAAuB,MAAM,wBAAwB,QAAQ,IAAI,cAAc;AACrF,QAAM,UAAU,MAAM,WAAW,QAAQ,IAAI,YAAY;AACzD,QAAM,kBAAkB,MAAM,mBAAmB,QAAQ,IAAI,qBAAqB;AAClF,MAAI,CAAC,wBAAwB,CAAC,SAAS;AACnC,UAAM,IAAI,yBAAyB,4CAA4C;AAAA,MAC3E,QAAQ,KAAK;AAAA,IACjB,CAAC;AAAA,EACL;AACA,QAAM,cAAc,MAAM,aAAa;AAAA,IACnC,GAAG;AAAA,IACH,kBAAkB,aAAa,sBAAsB,EAAE,UAAU,QAAQ,CAAC;AAAA,IAC1E;AAAA,IACA;AAAA,EACJ,CAAC,EAAE;AACH,MAAI,yBAAyB,QAAQ,IAAI,cAAc,GAAG;AACtD,yBAAqB,aAAa,yCAAyC,GAAG;AAAA,EAClF;AACA,SAAO;AACX;","names":[]}